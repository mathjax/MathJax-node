#! /usr/bin/env node

/************************************************************************
 *
 *  page2svg-preview
 *
 *  Reads an HTML5 file from stdin that contains math
 *  and writes a new HTML5 document to stdout that
 *  contains SVG versions as previews of the math, and
 *  retains the MathJax scripts.  That way, the SVGs act
 *  as a preview until MathJax can better process the math.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2014 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var mjAPI = require("../lib/mj-page.js");
var fs = require('fs');
var jsdom = require('jsdom').jsdom;

var font = null;
var configFile = null;

while (process.argv[2] !== undefined && process.argv[2].substr(0,2) === "--") {
  switch (process.argv[2]) {
    case "--font":
      font = process.argv[3];
      if (font === "STIX") {font = "STIX-Web"}
      process.argv.splice(2,2);
      break;

    case "--config":
      configFile = process.argv[3];
      process.argv.splice(2,2);
      break;

    default:
      console.error("Unknown option '"+process.argv[2]+"'");
      process.exit(1);
      break;
  }
}

var config = {};
if (configFile) {
  var path = require('path');
  config = require(path.resolve(configFile)).config || {};
}

config.SVG = config.SVG || {};
config.SVG.font = font || config.SVG.font || "TeX";

mjAPI.config({MathJax: config});
mjAPI.start();

//
//  Produce a Usage message, if needed
//
if (process.argv.length !== 2) {
  console.error("Usage: page2svg-preview [--font fontname] [--config configfile] < input.html > output.html");
  process.exit(1);
}

//
//  Process an HTML file:
//
function processHTML(html,callback) {
  var document = jsdom(html,null,{features:{FetchExternalResources: false}});
  var xmlns = getXMLNS(document);
  mjAPI.typeset({html:document.body.innerHTML, xmlns:xmlns, svgPreview:true}, function (result) {
    document.body.innerHTML = result.html;
    document.head.appendChild(document.body.firstChild);
    var HTML = "<!DOCTYPE html>\n"+document.outerHTML.replace(/^(\n|\s)*/,"");
    callback(HTML);
  });
}

//
//  Look up the MathML namespace from the <html> attributes
//
function getXMLNS(document) {
  var html = document.head.parentNode;
  for (var i = 0, m = html.attributes.length; i < m; i++) {
    var attr = html.attributes[i];
    if (attr.nodeName.substr(0,6) === "xmlns:" &&
        attr.nodeValue === "http://www.w3.org/1998/Math/MathML")
             {return attr.nodeName.substr(6)}
  }
  return "mml";
}

//
//  Read the input file and collect the file contents
//  When done, process the HTML.
//
var html = [];
process.stdin.on("readable",function (block) {
  var chunk = process.stdin.read();
  html.push(chunk.toString('utf8'));
});
process.stdin.on("end",function () {
  processHTML(html.join(""), function(html) {
    process.stdout.write(html);
  });
});
